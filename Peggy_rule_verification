//entry   = file
//file    = line ([\r]? [\n] line)*
//line    = ruleId W_ AIXMBusinessRule "~"
//ruleId  = "AIXM-5.1.1_RULE-" [a-fA-F0-9]+

AIXMBusinessRule = ItIsProhibited W_ ConditionsSeparated W_?

ConditionsSeparated = ElementaryCondition (W_ And W_ ElementaryCondition)*

ElementaryCondition = (Not S_)? (LVL_NounLocationVsNounLocation  / EVE_NounExtentVsNounExtent / VVV_NounValueVsNounValue / DVT_NounDescendNounsTest / DG_NounDescendNounsGeo / DV_NounDescendNounsValue / D_NounDescendNouns / A_NounAncestor / RF_NounReferenceNoun / RFB_NounReferencedByNouns)

D_NounDescendNouns = (Object/dataSet) S_ ("has-descendant"/"has") S_ (QuantityOrRange S_)? propertyPath { return `[D]` }

DVT_NounDescendNounsTest = D_NounDescendNouns S_ value S_ Test { return `[DVT]` }

D_NounDescendNounsNoQuantity = (Object/dataSet) S_ ("has-descendant"/"has") S_ propertyPath

DV_NounDescendNounsValue = ((D_NounDescendNounsNoQuantity S_ unspecified) / (D_NounDescendNouns S_ value)) { return `[DV]` }

DG_NounDescendNounsGeo = ((D_NounDescendNounsNoQuantity S_ unspecifiedGeo) / (D_NounDescendNouns S_ geo)) { return `[DG]` }

VVV_NounValueVsNounValue = (Object/dataSet) S_ "has" S_ propertyPath S_ value S_ CompareValues S_ propertyPath S_ value { return `[VVV]` }

LVL_NounLocationVsNounLocation = (Object/dataSet) S_ "has" S_ elementPath S_ location S_ CompareLocation S_ elementPath S_ location { return `[LVL]` }

EVE_NounExtentVsNounExtent = (Object/dataSet) S_ "has" S_ elementPath S_ geo S_ CompareExtent S_ elementPath S_ extent { return `[EVE]` }

A_NounAncestor = Object S_ "is-descendant-of" S_ Object { return `[A]` }

RF_NounReferenceNoun = propertyWithRef S_ "references-to" S_ Object { return `[RF]` }

RFB_NounReferencedByNouns = Object S_ "is-referenced-by" S_ propertyWithRef { return `[RFB]` }

Test = (That / CompareWithNumber / CompareWithSingleName / CompareWithNameArray / CoordinatesExpressedWith / ExpressedWith)

That = "#" W_? (CHAR / W_ / [-${}:,.+*/\\\[\]] /Integer)+ W_? "#"

CompareValues = ( higherOrEqual / higher / lowerOrEqual / lower / equal / different / sameAs / other)

CompareWithSingleName = ( sameAs / other / startingWith / containsSubstring ) S_ ((SingleQuote parameter SingleQuote) / Singlevalue)

CompareWithNameArray = ( otherThanAnyOf / asOneOf ) S_ (Multiplevalues / parameter)

CompareWithNumber = ( higherOrEqual / higher / lowerOrEqual / lower / equal / different) S_ (parameter / (SingleQuote Decimal SingleQuote))

CompareLocation = ("closer-than" / "further-than") S_ Decimal "NM" S_ "to"

CompareExtent = "intersects"

ExpressedWith = "expressed-with" S_ QuantityOrRange S_ (Decimals / Characters)

CoordinatesExpressedWith = "coordinates-expressed-with" S_ QuantityOrRange S_ (Decimals / Characters)

Multiplevalues = "(" W_? Singlevalue (Commavalue)* W_? ")"

Commavalue = W_? "," W_? Singlevalue

Singlevalue = (SingleQuote valueContent SingleQuote) / (DoubleQuote valueContent DoubleQuote)

Object = (Noun index?)

elementPath	= (Noun PS)* Noun index? (PS Noun)*

propertyPath	 = (attrPath / elementPath)

attrPath	 = (elementPath)? attr

propertyWithRef  = elementPath hrefAttr

Noun		 = namespace? (NounChars / parameter)

NounChars = CHAR [a-zA-Z_0-9]*

dataSet		= "::dataSet"
hrefAttr	= "@xlink:href"
namespace	= CHAR [a-zA-Z_0-9]* ':'
PS		= '.'
attr		= '@' namespace? NounChars
index		= '[' FirstDigit ']'

QuantityOrRange = (Quantity / Range)

Quantity = ("more-than" / "exactly" / "less-than" / "at-least" / "at-most") S_ OneOrInteger

Range = "from" S_ MultipleIntegerNoZero W_ "to" S_ MultipleIntegerNoZero

OneOrInteger = ("one" / MultipleIntegerNoZero / parameter)

parameter = "${" (CHAR)+ "}"

ItIsProhibited	= prohibit:"It is prohibited that" { return `${prohibit}` }

And		= splitter:"and" { return `${splitter}` }
Not		= not:"not" { return `${not}` }
Decimals	= "'decimals'"
Characters	= "'characters'"
value		= "value"
unspecified	= "value unspecified"
location = "location" 
extent = "extent"
geo = ("location" / "extent")
unspecifiedGeo = ("location unspecified " / "extent unspecified ")
higherOrEqual	= "higher-or-equal-to"
higher		= "higher-than"
lowerOrEqual	= "lower-or-equal-to"
lower		= "lower-than"
equal		= "equal-to"
different	= "different-from"
sameAs		= "as"
other		= "other-than"
startingWith 	= "starting-with"
containsSubstring = "contains-substring"
otherThanAnyOf 	= "other-than-one-of"
asOneOf		= "as-one-of"

MultipleInteger = Integer+
MultipleIntegerNoZero = FirstDigit (Integer)*
Decimal = (MultipleIntegerNoZero / Integer) ("." DecimalEnd)?
DecimalEnd = Integer+

valueContent	= ([!-&(-_a-z{-~ \t])+ 

CHAR = [a-zA-Z]
Integer = [0-9]
FirstDigit = [1-9]
SingleQuote = [']
DoubleQuote = ["]
S_ = [ \t]+
W_ = (S_ / [\n\r])+
